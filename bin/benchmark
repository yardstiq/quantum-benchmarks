#!/bin/sh
FILE_PATH=$(readlink -f "$0")
BASE_PATH=$(dirname "$FILE_PATH")
ROOT_PATH="$BASE_PATH/.."
BENCHMARK_DATA_PATH="$ROOT_PATH/data"
BENCHMARK_LOG_PATH="$ROOT_PATH/log"
NCORES=$(grep ^cpu\\scores /proc/cpuinfo | uniq |  awk '{print $4}')

# benchmark pytest-benchmark based scripts
benchmark_pytest() {
    #source activate ./env
    # set threads to one
    echo "Benchmark pytest: $1 ($(date +"%Y-%m-%d-%H-%M-%S"))"
    export OMP_NUM_THREADS=1
    export MKL_NUM_THREADS=1
    export MKL_DOMAIN_NUM_THREADS=1
    
    mkdir -p "$BENCHMARK_LOG_PATH" "$BENCHMARK_DATA_PATH"
    pytest "$1/benchmarks.py" --benchmark-storage="file://$BENCHMARK_DATA_PATH" \
        --benchmark-save=$1 --benchmark-sort=name --benchmark-min-rounds=5 \
        > "$BENCHMARK_LOG_PATH/$1.out" 2> "$BENCHMARK_LOG_PATH/$1.err"
}

# benchmark Julia BenchmarkTools based scripts
benchmark_julia() {
    echo "Bechnmark julia: yao ($(date +"%Y-%m-%d-%H-%M-%S"))"
    export JULIA_NUM_THREADS=1
    export OMP_NUM_THREADS=1
    export MKL_NUM_THREADS=1

    mkdir -p "$BENCHMARK_LOG_PATH" "$BENCHMARK_DATA_PATH"
    julia --project yao/benchmarks.jl\
        $BENCHMARK_DATA_PATH/yao.csv\
        $BENCHMARK_DATA_PATH/yao_qcbm.csv\
        $BENCHMARK_DATA_PATH/yao_qcbm_batch.csv\
        > "$BENCHMARK_LOG_PATH/yao.out" 2> "$BENCHMARK_LOG_PATH/yao.err"
}

# benchmark misc
benchmark_misc() {
    echo "Benchmark misc: $1 ($(date +"%Y-%m-%d-%H-%M-%S"))"
    mkdir -p "$BENCHMARK_LOG_PATH" "$BENCHMARK_DATA_PATH"
    "$1/benchmarks.sh" "$BENCHMARK_DATA_PATH" > "$BENCHMARK_LOG_PATH/$1.out" 2> "$BENCHMARK_LOG_PATH/$1.err"

}

install() {
    # install Python dependencies
    echo "creating local virtualenv"
    conda create -y --prefix=env python=3.8
    echo "activating virtualenv"
    conda activate ./env
    echo "installing Python dependencies"
    conda install -p env -y numpy matplotlib mkl-service pytest pybind11 pytest-benchmark ipython cffi
    ./env/bin/pip install qiskit qiskit-aer-gpu cirq projectq pyquest-cffi pennylane qulacs-gpu

    # install Julia dependencies
    echo "installing Julia dependencies"
    julia --project -e "using Pkg; Pkg.instantiate()"
    
    # install jku-ddsim from github
    echo "installing jkq-ddsim dependencies"
    jkq-ddsim/install.sh
}

benchmark_all_parallel(){
    # start benchmark
    benchmark_pytest cirq       &
    benchmark_pytest qiskit     &
    benchmark_pytest projectq   &
    benchmark_pytest pennylane  &
    benchmark_pytest quest      &
    benchmark_pytest qulacs     &
    benchmark_julia             &
    benchmark_misc jkq-ddsim    &
}

benchmark_all(){
    # start benchmark
    benchmark_pytest cirq
    benchmark_pytest qiskit
    benchmark_pytest projectq
    benchmark_pytest pennylane
    benchmark_pytest quest
    benchmark_pytest qualacs
    benchmark_julia
    benchmark_misc jkq-ddsim
}

benchmark(){
    case $1 in
        yao) (cd $ROOT_PATH && benchmark_julia)
        ;;
        jkq-ddsim) (cd $ROOT_PATH && benchmark_misc $1)
        ;;
        *) (cd $ROOT_PATH && benchmark_pytest $1)
    esac
}

help() {
    echo "
    Quantum Circuit Simulation Benchmark

install                 install dependencies
run [package]           run benchmark of [package] or run all benchmarks by default
benchmark               benchmark in sequence to make sure every benchmark is run in the same envrionment
parallel [package]      spawn [package] benchmark in a process or run all benchmark in parallel by default
help                    print this message
"
}

single_arg() {
    case $1 in
        install) (cd $ROOT_PATH && install)
        ;;
        run) (cd $ROOT_PATH && benchmark)
        ;;
        benchmark) (cd $ROOT_PATH && benchmark_all)
        ;;
        parallel) (cd $ROOT_PATH && benchmark_all_parallel)
        ;;
        *) help
        ;;
    esac
}

double_arg() {
    case $1 in
        run) benchmark $2
        ;;
        parallel) benchmark $2 &
        ;;
        *) help
    esac
}

case $# in
    1) single_arg $1
    ;;
    2) double_arg $1 $2
    ;;
    *) help
esac
